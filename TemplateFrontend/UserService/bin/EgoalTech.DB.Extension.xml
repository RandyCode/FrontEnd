<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EgoalTech.DB.Extension</name>
    </assembly>
    <members>
        <member name="T:EgoalTech.DB.Extension.QueryCondition`1">
            <summary>
            Lambda 查询的辅助类。eg:
            <para> var dbContext = IOC.Get&lt;IDbContext4Lambda&gt;();</para>
            <para> var condition = new QueryCondition&lt;Currency&gt;();</para>
            <para> condition &amp;=</para>
            <para> t => t.Id == "ID";</para>
            <para> condition &amp;=</para>
            <para> t => t.name == "NAME";</para>
            <para> //1. 普通查询:</para>
            <para> var currency = dbContext.QueryObject(condition.Where); </para>
            <para> //2. 子查询:</para>
            <para> var subQuery = condition.Select(t => t.Code);</para>
            <para> var currency = dbContext.QueryObject&lt;Currency&gt;(t => t.Code.In(subQuery)); </para>
            <para> //3. 单值查询（Max/Min/Avg/Sum）:</para>
            <para> var query = condition.Max(t => t.Number);</para>
            <para> var maxNumber = dbContext.ExecuteScalar(query); </para>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EgoalTech.DB.Extension.QueryCondition`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Lambda 查询的辅助类。eg:
            <para> var dbContext = IOC.Get&lt;IDbContext4Lambda&gt;();</para>
            <para> var condition = new QueryCondition&lt;Currency&gt;();</para>
            <para> condition &amp;=  t => t.Id == "ID";</para>
            <para> condition &amp;=  t => t.name == "NAME";</para>
            <para> //1. 普通查询:</para>
            <para> var currency = dbContext.QueryObject(condition.Where); </para>
            <para> //2. 子查询:</para>
            <para> var subQuery = condition.Select(t => t.Code);</para>
            <para> var currency = dbContext.QueryObject&lt;Currency&gt;(t => t.Code.In(subQuery)); </para>
            <para> //3. 单值查询（Max/Min/Avg/Sum）:</para>
            <para> var query = condition.Max(t => t.Number);</para>
            <para> var maxNumber = dbContext.ExecuteScalar(query); </para>
            </summary>
            <param name="condition"></param>
        </member>
        <member name="M:EgoalTech.DB.Extension.QueryCondition`1.op_BitwiseAnd(EgoalTech.DB.Extension.QueryCondition{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.QueryCondition`1.op_BitwiseOr(EgoalTech.DB.Extension.QueryCondition{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.QueryCondition`1.op_Implicit(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})~EgoalTech.DB.Extension.QueryCondition{`0}">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.QueryCondition`1.op_Implicit(EgoalTech.DB.Extension.QueryCondition{`0})~System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.QueryCondition`1.Where">
            <summary></summary>
        </member>
        <member name="T:EgoalTech.DB.Extension.LambdaQueryExtension">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.LambdaQueryExtension.Select``2(EgoalTech.DB.Extension.QueryCondition{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            子查询辅助。eg:
            <para> var dbContext = IOC.Get&lt;IDbContext4Lambda&gt;();</para>
            <para> var sumQuery = new QueryCondition&lt;Currency&gt;(t => t.Activate == true)</para>
            <para> .Select(t => t.Code);</para>
            <para> var currency = dbContext.QueryObject&lt;Currency&gt;(t => t.Code.In(subQuery)); </para>
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="condition"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.LambdaQueryExtension.Max``2(EgoalTech.DB.Extension.QueryCondition{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            单值查询辅助。eg:
            <para> var dbContext = IOC.Get&lt;IDbContext4Lambda&gt;();</para>
            <para> var query = new QueryCondition&lt;Currency&gt;(t => t.Activate == true)</para>
            <para> .Max(t => t.Number);</para>
            <para> var maxNumber = dbContext.ExecuteScalar(query); </para>
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="condition"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.LambdaQueryExtension.Min``2(EgoalTech.DB.Extension.QueryCondition{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            单值查询辅助。eg:
            <para> var dbContext = IOC.Get&lt;IDbContext4Lambda&gt;();</para>
            <para> var query = new QueryCondition&lt;Currency&gt;(t => t.Activate == true)</para>
            <para> .Min(t => t.Number);</para>
            <para> var minNumber = dbContext.ExecuteScalar(query); </para>
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="condition"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.LambdaQueryExtension.Avg``2(EgoalTech.DB.Extension.QueryCondition{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            单值查询辅助。eg:
            <para> var dbContext = IOC.Get&lt;IDbContext4Lambda&gt;();</para>
            <para> var query = new QueryCondition&lt;Currency&gt;(t => t.Activate == true)</para>
            <para> .Avg(t => t.Number);</para>
            <para> var avgNumber = dbContext.ExecuteScalar(query); </para>
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="condition"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.LambdaQueryExtension.Sum``2(EgoalTech.DB.Extension.QueryCondition{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            单值查询辅助。eg:
            <para> var dbContext = IOC.Get&lt;IDbContext4Lambda&gt;();</para>
            <para> var query = new QueryCondition&lt;Currency&gt;(t => t.Activate == true)</para>
            <para> .Sum(t => t.Number);</para>
            <para> var sumNumber = dbContext.ExecuteScalar(query); </para>
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="condition"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="T:EgoalTech.DB.Extension.FieldValueRouter">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.FieldValueRouter.#ctor(System.Linq.Expressions.LambdaExpression)">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.FieldValueRouter.FieldValues">
            <summary></summary>
        </member>
        <member name="T:EgoalTech.DB.Extension.DbContext4Lambda">
            <summary>ORM Lambda 扩展实现</summary>
        </member>
        <member name="T:EgoalTech.DB.Extension.DbContext">
            <summary>ORM 实现，支持基础的 CURD</summary>
        </member>
        <member name="T:EgoalTech.DB.Extension.DbExecutor">
            <summary>数据库操作类</summary>
        </member>
        <member name="T:EgoalTech.DB.Extension.IDbExecutor">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbExecutor.QueryObject``1(System.String)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbExecutor.QueryObject``1(System.String,System.Object)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbExecutor.QueryObjects``1(System.String,System.Int32,System.Int32,EgoalTech.DB.OrderBy[])">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbExecutor.QueryCount``1(System.String)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbExecutor.Save``1(``0)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbExecutor.Remove``1(``0)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbExecutor.ExecuteNonQuery(System.String)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbExecutor.ExecuteScalar(System.String)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbExecutor.ExecuteScalar``1(System.String)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbExecutor.ExecuteQuery(System.String)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbExecutor.BeginTransaction(System.Data.IsolationLevel)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbExecutor.Commit">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbExecutor.Rollback">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.DbExecutor.QueryObject``1(System.String)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.DbExecutor.QueryObject``1(System.String,System.Object)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.DbExecutor.QueryObjects``1(System.String,System.Int32,System.Int32,EgoalTech.DB.OrderBy[])">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.DbExecutor.QueryCount``1(System.String)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.DbExecutor.Save``1(``0)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.DbExecutor.ExecuteNonQuery(System.String)">
            <summary>
            执行一段 sql 语句，返回受影响的行数。eg:
            <para> var dbContext = IOC.Get&lt;DbExecutor&gt;();</para>
            <para> var sql = "UPDATE currency SET name = 'newname' where id = 'xxxx'";</para>
            <para> var updateCount = dbContext.ExecuteNonQuery(sql);</para>
            </summary>
            <param name="sql">执行的 sql</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.DbExecutor.ExecuteScalar(System.String)">
            <summary>
            执行一段 sql 语句，返回第一行第一列。eg:
            <para> var dbContext = IOC.Get&lt;DbExecutor&gt;();</para>
            <para> var sql = "SELECT Max(crete_datetime) FROM currency";</para>
            <para> var lastCreateDatetime = dbContext.ExecuteScalar(sql);</para>
            </summary>
            <param name="sql">执行的 sql</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.DbExecutor.ExecuteScalar``1(System.String)">
            <summary>
            执行一段 sql 语句，以指定类型返回第一行第一列。eg:
            <para> var dbContext = IOC.Get&lt;DbExecutor&gt;();</para>
            <para> var sql = "SELECT Max(crete_datetime) FROM currency";</para>
            <para> var lastCreateDatetime = dbContext.ExecuteScalar&lt;Datetime&gt;(sql);</para>
            </summary>
            <typeparam name="T">指定返回结果的类型</typeparam>
            <param name="sql">执行的 sql</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.DbExecutor.ExecuteQuery(System.String)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.DbExecutor.Remove``1(``0)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.DbExecutor.Dispose">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.DbExecutor.BeginTransaction(System.Data.IsolationLevel)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.DbExecutor.Commit">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.DbExecutor.Rollback">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.DbExecutor.DbObjectOperator">
            <summary></summary>
        </member>
        <member name="T:EgoalTech.DB.Extension.IDbContext">
            <summary>ORM 接口，支持基础的 CURD</summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbContext.Create``1(``0)">
            <summary>
            往数据库插入一条记录。eg：
            <para> var dbContext = IOC.Get&lt;IDbContext4Lambda&gt;();</para>
            <para> var currency = dbContext.Create(new Currency(){Id = "指定主键",Name = "newName"});//指定主键</para>
            <para> var currency2 = dbContext.Create(new Currency(){Name = "newName"});//不指定主键</para>
            </summary>
            <typeparam name="T">DbMocel，派生于 EgoalTech.DB.DbObject</typeparam>
            <param name="model">需要插入数据库的记录</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbContext.Update``1(``0)">
            <summary>
            更新一条记录。eg：
            <para> var dbContext = IOC.Get&lt;IDbContext4Lambda&gt;();</para>
            <para> var currency = dbContext.QueryObject&lt;Currency&gt;();</para>
            <para> currency.Name = "newName";</para>
            <para> dbContext.Update(currency);</para>
            </summary>
            <typeparam name="T">DbMocel，派生于 EgoalTech.DB.DbObject</typeparam>
            <param name="model">需要更新的记录</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbContext.PartialUpdate``1(``0,System.String[])">
            <summary>
            根据主键更新指定值段。eg：
            <para> var dbContext = IOC.Get&lt;IDbContext4Lambda&gt;();</para>
            <para> var currency = dbContext.QueryObject&lt;Currency&gt;();</para>
            <para> currency.Name = "newName";</para>
            <para> currency.Description = "new description";</para>
            <para> dbContext.PartialUpdate（currency, "Name", "Description");</para>
            </summary>
            <typeparam name="T">DbMocel，派生于 EgoalTech.DB.DbObject</typeparam>
            <param name="model">需要更新的实体</param>
            <param name="updateFields">需要更新的字段值</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbContext.QueryObject``1(System.String,System.Boolean)">
            <summary>
            根据 Where 条件（字符串）查询记录。eg：
            <para> var dbContext = IOC.Get&lt;IDbContext4Lambda&gt;();</para>
            <para> var condition = new SqlStringBuilder();</para>
            <para> condition.AppendFormat("name = '{0}' AND code LIKE '{1}%'", name, code);</para>
            <para> var currency = dbContext.QueryObjects&lt;Currency&gt;(condition.ToString());</para>
            </summary>
            <typeparam name="T">DbMocel，派生于 EgoalTech.DB.DbObject</typeparam>
            <param name="condition">Where 条件</param>
            <param name="checkExist">检查记录是否存在。true：当记录不存在时抛异常；false：当记录不存在时返回 null。</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbContext.Remove``1(System.String)">
            <summary>
            删除一条记录。eg：
            <para> var dbContext = IOC.Get&lt;IDbContext4Lambda&gt;();</para>
            <para> var currency = dbContext.QueryObject&lt;Currency&gt;();</para>
            <para> dbContext.Update&lt;Currency&gt;(currency.Id);</para>
            </summary>
            <typeparam name="T">DbMocel，派生于 EgoalTech.DB.DbObject</typeparam>
            <param name="id">需要删除的记录 Id</param>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbContext.Remove``1(``0)">
            <summary>
            删除一条记录。eg：
            <para> var dbContext = IOC.Get&lt;IDbContext4Lambda&gt;();</para>
            <para> var currency = dbContext.QueryObject&lt;Currency&gt;();</para>
            <para> dbContext.Update&lt;Currency&gt;(currency);</para>
            </summary>
            <typeparam name="T">DbMocel，派生于 EgoalTech.DB.DbObject</typeparam>
            <param name="model">需要删除的记录</param>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbContext.QueryObjects``1(System.String,System.Int32,System.Int32,EgoalTech.DB.OrderBy[])">
            <summary>
            根据 Lambda 条件查询记录列表。eg：
            <para> var dbContext = IOC.Get&lt;IDbContext4Lambda&gt;();</para>
            <para> var condition = new SqlStringBuilder();</para>
            <para> condition.AppendFormat("name = '{0}' AND code LIKE '{1}%'", name, code);</para>
            <para> var currency = dbContext.QueryObjects&lt;Currency&gt;(</para>
            <para>     condition.ToString(), 10, 0, </para>
            <para>     new OrderBy(){ Column = "Name", Desc = false}, new OrderBy(){ Column = "CreateDatetime", Desc = true});</para>
            </summary>
            <typeparam name="T">DbMocel，派生于 EgoalTech.DB.DbObject</typeparam>
            <param name="condition">Where 条件(字符串)</param>
            <param name="rowCount">分页参数：每页返回记录条数</param>
            <param name="pageIndex">分页参数：页码</param>
            <param name="orderBy">排序参数 </param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbContext.GetCount``1(System.String)">
            <summary>
            根据 Lambda 条件查询记录总数。eg:
            <para> var dbContext = IOC.Get&lt;IDbContext4Lambda&gt;();</para>
            <para> var condition = new SqlStringBuilder();</para>
            <para> condition.AppendFormat("name = '{0}' AND code LIKE '{1}%'", name, code);</para>
            <para> var count = dbContext.GetCount&lt;Currency&gt;(condition.ToString());</para>
            </summary>
            <typeparam name="T">DbMocel，派生于 EgoalTech.DB.DbObject</typeparam>
            <param name="condition">Where 条件(字符串)</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbContext.ExecuteQuery(System.String)">
            <summary>
            执行一段 sql 语句，以二维数组返回结果。eg:
            <para> var dbContext = IOC.Get&lt;IDbContext4Lambda&gt;();</para>
            <para> var sql = "SELECT id, name FROM currency";</para>
            <para> var arr = dbContext.ExecuteQuery(sql);</para>
            <para> var currenies = arr.Select(i => new Currency(){Id = (string)i[0],Name = (string)i[1]}).ToList();</para>
            </summary>
            <param name="sql">执行的 sql</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbContext.ExecuteNonQuery(System.String)">
            <summary>
            执行一段 sql 语句，返回受影响的行数。eg:
            <para> var dbContext = IOC.Get&lt;IDbContext4Lambda&gt;();</para>
            <para> var sql = "UPDATE currency SET name = 'newname' where id = 'xxxx'";</para>
            <para> var updateCount = dbContext.ExecuteNonQuery(sql);</para>
            </summary>
            <param name="sql">执行的 sql</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbContext.ExecuteScalar(System.String)">
            <summary>
            执行一段 sql 语句，返回第一行第一列。eg:
            <para> var dbContext = IOC.Get&lt;IDbContext4Lambda&gt;();</para>
            <para> var sql = "SELECT Max(crete_datetime) FROM currency";</para>
            <para> var lastCreateDatetime = dbContext.ExecuteScalar(sql);</para>
            </summary>
            <param name="sql">执行的 sql</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbContext.ExecuteScalar``1(System.String)">
            <summary>
            执行一段 sql 语句，以指定类型返回第一行第一列。eg:
            <para> var dbContext = IOC.Get&lt;IDbContext4Lambda&gt;();</para>
            <para> var sql = "SELECT Max(crete_datetime) FROM currency";</para>
            <para> var lastCreateDatetime = dbContext.ExecuteScalar&lt;Datetime&gt;(sql);</para>
            </summary>
            <typeparam name="T">指定返回结果的类型</typeparam>
            <param name="sql">执行的 sql</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbContext.RetrieveObjectAsParameter``1">
            <summary>
            从系统配置表查询配置信息。eg:
            <para> [DataTable("system_property")]</para>
            <para> public class EGSettleProperty{</para>
            <para> [DataMember]//对应 system_property 表中 name = 'settle_currency_code' 的记录的 value 字段值</para>
            <para> private string settle_currency_code;</para>
            <para> public string SettleCurrencyCode{ </para>
            <para> get{ return this.settle_currency_code;}</para>
            <para> set{ this.settle_currency_code = value;}</para>
            <para> }</para>
            <para> var dbContext = IOC.Get&lt;IDbContext4Lambda&gt;();</para>
            <para> var egSettleProperty = dbContext.RetrieveObjectAsParameter&lt;EGSettleProperty&gt;(sql);</para>
            </summary>
            <typeparam name="T">系统配置表对应的 DbModel。</typeparam>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbContext.StoreObjectAsParameter``1(``0)">
            <summary>
            保存配置信息到系统配置表。eg:
            <para> [DataTable("system_property")]</para>
            <para> public class EGSettleProperty{</para>
            <para> [DataMember]//对应 system_property 表中 name = 'settle_currency_code' 的记录的 value 字段值</para>
            <para> private string settle_currency_code;</para>
            <para> public string SettleCurrencyCode{ </para>
            <para> get{ return this.settle_currency_code;}</para>
            <para> set{ this.settle_currency_code = value;}</para>
            <para> }</para>
            <para> var dbContext = IOC.Get&lt;IDbContext4Lambda&gt;();</para>
            <para> var egSettleProperty = dbContext.RetrieveObjectAsParameter&lt;EGSettleProperty&gt;(sql);</para>
            <para> egSettleProperty.SettleCurrencyCode = "CNY";</para>
            <para> dbContext.StoreObjectAsParameter(egSettleProperty);</para>
            </summary>
            <typeparam name="T">系统配置表对应的 DbModel。</typeparam>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbContext.BeginTransaction(System.Data.IsolationLevel)">
            <summary>启用事务</summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbContext.Commit">
            <summary>提交事务</summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbContext.Rollback">
            <summary>回滚事务</summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.DbContext.Create``1(``0)">
            <summary>
            往数据库插入一条记录。eg：
            <para> var dbContext = IOC.Get&lt;DbContext&gt;();</para>
            <para> var currency = dbContext.Create(new Currency(){Id = "指定主键",Name = "newName"});//指定主键</para>
            <para> var currency2 = dbContext.Create(new Currency(){Name = "newName"});//不指定主键</para>
            </summary>
            <typeparam name="T">DbMocel，派生于 EgoalTech.DB.DbObject</typeparam>
            <param name="model">需要插入数据库的记录</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.DbContext.Update``1(``0)">
            <summary>
            更新一条记录。eg：
            <para> var dbContext = IOC.Get&lt;DbContext&gt;();</para>
            <para> var currency = dbContext.QueryObject&lt;Currency&gt;();</para>
            <para> currency.Name = "newName";</para>
            <para> dbContext.Update(currency);</para>
            </summary>
            <typeparam name="T">DbMocel，派生于 EgoalTech.DB.DbObject</typeparam>
            <param name="model">需要更新的记录</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.DbContext.PartialUpdate``1(``0,System.String[])">
            <summary>
            根据主键更新指定值段。eg：
            <para> var dbContext = IOC.Get&lt;DbContext&gt;();</para>
            <para> var currency = dbContext.QueryObject&lt;Currency&gt;();</para>
            <para> currency.Name = "newName";</para>
            <para> currency.Description = "new description";</para>
            <para> dbContext.PartialUpdate（currency, "Name", "Description");</para>
            </summary>
            <typeparam name="T">DbMocel，派生于 EgoalTech.DB.DbObject</typeparam>
            <param name="model">需要更新的实体</param>
            <param name="updateFields">需要更新的字段值</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.DbContext.QueryObject``1(System.String,System.Boolean)">
            <summary>
            根据 Where 条件（字符串）查询记录。eg：
            <para> var dbContext = IOC.Get&lt;DbContext&gt;();</para>
            <para> var condition = new SqlStringBuilder();</para>
            <para> condition.AppendFormat("name = '{0}' AND code LIKE '{1}%'", name, code);</para>
            <para> var currency = dbContext.QueryObjects&lt;Currency&gt;(condition.ToString());</para>
            </summary>
            <typeparam name="T">DbMocel，派生于 EgoalTech.DB.DbObject</typeparam>
            <param name="condition">Where 条件</param>
            <param name="checkExist">检查记录是否存在。true：当记录不存在时抛异常；false：当记录不存在时返回 null。</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.DbContext.Remove``1(System.String)">
            <summary>
            删除一条记录。eg：
            <para> var dbContext = IOC.Get&lt;DbContext&gt;();</para>
            <para> var currency = dbContext.QueryObject&lt;Currency&gt;();</para>
            <para> dbContext.Update&lt;Currency&gt;(currency.Id);</para>
            </summary>
            <typeparam name="T">DbMocel，派生于 EgoalTech.DB.DbObject</typeparam>
            <param name="id">需要删除的记录 Id</param>
        </member>
        <member name="M:EgoalTech.DB.Extension.DbContext.Remove``1(``0)">
            <summary>
            删除一条记录。eg：
            <para> var dbContext = IOC.Get&lt;DbContext&gt;();</para>
            <para> var currency = dbContext.QueryObject&lt;Currency&gt;();</para>
            <para> dbContext.Update&lt;Currency&gt;(currency);</para>
            </summary>
            <typeparam name="T">DbMocel，派生于 EgoalTech.DB.DbObject</typeparam>
            <param name="model">需要删除的记录</param>
        </member>
        <member name="M:EgoalTech.DB.Extension.DbContext.QueryObjects``1(System.String,System.Int32,System.Int32,EgoalTech.DB.OrderBy[])">
            <summary>
            根据 Lambda 条件查询记录列表。eg：
            <para> var dbContext = IOC.Get&lt;DbContext&gt;();</para>
            <para> var condition = new SqlStringBuilder();</para>
            <para> condition.AppendFormat("name = '{0}' AND code LIKE '{1}%'", name, code);</para>
            <para> var currency = dbContext.QueryObjects&lt;Currency&gt;(</para>
            <para>     condition.ToString(), 10, 0, </para>
            <para>     new OrderBy(){ Column = "Name", Desc = false}, new OrderBy(){ Column = "CreateDatetime", Desc = true});</para>
            </summary>
            <typeparam name="T">DbMocel，派生于 EgoalTech.DB.DbObject</typeparam>
            <param name="condition">Where 条件(字符串)</param>
            <param name="rowCount">分页参数：每页返回记录条数</param>
            <param name="pageIndex">分页参数：页码</param>
            <param name="orderBy">排序参数 </param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.DbContext.GetCount``1(System.String)">
            <summary>
            根据 Lambda 条件查询记录总数。eg:
            <para> var dbContext = IOC.Get&lt;DbContext&gt;();</para>
            <para> var condition = new SqlStringBuilder();</para>
            <para> condition.AppendFormat("name = '{0}' AND code LIKE '{1}%'", name, code);</para>
            <para> var count = dbContext.GetCount&lt;Currency&gt;(condition.ToString());</para>
            </summary>
            <typeparam name="T">DbMocel，派生于 EgoalTech.DB.DbObject</typeparam>
            <param name="condition">Where 条件(字符串)</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.DbContext.RetrieveObjectAsParameter``1">
            <summary>
            从系统配置表查询配置信息。eg:
            <para> [DataTable("system_property")]</para>
            <para> public class EGSettleProperty{</para>
            <para> [DataMember]//对应 system_property 表中 name = 'settle_currency_code' 的记录的 value 字段值</para>
            <para> private string settle_currency_code;</para>
            <para> public string SettleCurrencyCode{ </para>
            <para> get{ return this.settle_currency_code;}</para>
            <para> set{ this.settle_currency_code = value;}</para>
            <para> }</para>
            <para> var dbContext = IOC.Get&lt;DbContext&gt;();</para>
            <para> var egSettleProperty = dbContext.RetrieveObjectAsParameter&lt;EGSettleProperty&gt;(sql);</para>
            </summary>
            <typeparam name="T">系统配置表对应的 DbModel。</typeparam>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.DbContext.StoreObjectAsParameter``1(``0)">
            <summary>
            保存配置信息到系统配置表。eg:
            <para> [DataTable("system_property")]</para>
            <para> public class EGSettleProperty{</para>
            <para> [DataMember]//对应 system_property 表中 name = 'settle_currency_code' 的记录的 value 字段值</para>
            <para> private string settle_currency_code;</para>
            <para> public string SettleCurrencyCode{ </para>
            <para> get{ return this.settle_currency_code;}</para>
            <para> set{ this.settle_currency_code = value;}</para>
            <para> }</para>
            <para> var dbContext = IOC.Get&lt;DbContext&gt;();</para>
            <para> var egSettleProperty = dbContext.RetrieveObjectAsParameter&lt;EGSettleProperty&gt;(sql);</para>
            <para> egSettleProperty.SettleCurrencyCode = "CNY";</para>
            <para> dbContext.StoreObjectAsParameter(egSettleProperty);</para>
            </summary>
            <typeparam name="T">系统配置表对应的 DbModel。</typeparam>
            <returns></returns>
        </member>
        <member name="P:EgoalTech.DB.Extension.DbContext.ShowValidateErrorValue">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.DbContext.DbRuleContext">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.DbContext.DbLogger">
            <summary></summary>
        </member>
        <member name="T:EgoalTech.DB.Extension.IDbContext4Lambda">
            <summary>ORM Lambda 扩展接口</summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbContext4Lambda.PartialUpdate``1(System.Linq.Expressions.Expression{System.Func{``0,``0}})">
            <summary>
            根据主键更新指定值段。eg：
            <para> var dbContext = IOC.Get&lt;IDbContext4Lambda&gt;();</para>
            <para> dbContext.PartialUpdate&lt;Currency&gt;（t => new Currency(){Id = "主键【必须】",Name = "newName"});</para>
            </summary>
            <typeparam name="T">DbMocel，派生于 EgoalTech.DB.DbObject</typeparam>
            <param name="updateFields">需要更新的字段值</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbContext4Lambda.QueryObject``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            根据 Lambda 条件查询一条记录。如果存在多条数据，则返回第一条。eg：
            <para> var dbContext = IOC.Get&lt;IDbContext4Lambda&gt;();</para>
            <para> var currency = dbContext.QueryObject&lt;Currency&gt;(t => t.Name == "name" &amp;&amp; t.Code.Like("CN%"));</para>
            <para> //可添加命名空间 EgoalTech.DB.Extension.SqlMethod 以支持 Like/In/NotIn/Ascii/Defference/Left/Len/Lower/Ltrim/Rtrim/Right/Upper/GetDate</para>
            </summary>
            <typeparam name="T">DbMocel，派生于 EgoalTech.DB.DbObject</typeparam>
            <param name="where">Lambda 条件</param>
            <param name="checkExist">检查记录是否存在。true：当记录不存在时抛异常；false：当记录不存在时返回 null。</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbContext4Lambda.QueryObjects``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,EgoalTech.DB.Extension.OrderBy{``0}[])">
            <summary>
            根据 Lambda 条件查询记录列表。eg：
            <para> var dbContext = IOC.Get&lt;IDbContext4Lambda&gt;();</para>
            <para> var currencies = dbContext.QueryObjects&lt;Currency&gt;(</para>
            <para>     t => t.Name == "name" &amp;&amp; t.Code.Like("CN%"), 10, 0, </para>
            <para>     new OrderBy&lt;Currency&gt;(){ Column = t => t.Name, Desc = false}, new OrderBy&lt;Currency&gt;(){ Column = t => t.CreateDatetime, Desc = true});</para>
            <para> //可添加命名空间 EgoalTech.DB.Extension.SqlMethod 以支持 Like/In/NotIn/Ascii/Defference/Left/Len/Lower/Ltrim/Rtrim/Right/Upper/GetDate</para>
            </summary>
            <typeparam name="T">DbMocel，派生于 EgoalTech.DB.DbObject</typeparam>
            <param name="where">Lambda 条件</param>
            <param name="rowCount">分页参数：每页返回记录条数</param>
            <param name="pageIndex">分页参数：页码</param>
            <param name="orderBys">排序参数 </param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbContext4Lambda.QueryObjects``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,EgoalTech.DB.OrderBy[])">
            <summary>
            根据 Lambda 条件查询记录列表。eg:
            <para> var dbContext = IOC.Get&lt;IDbContext4Lambda&gt;();</para>
            <para> var currencies = dbContext.QueryObjects&lt;Currency&gt;(</para>
            <para>     t => t.Name == "name" &amp;&amp; t.Code.Like("CN%"), 10, 0, </para>
            <para>     new OrderBy(){ Column ="Name", Desc = false}, new OrderBy(){ Column = "CreateDatetime", Desc = true});</para>
            <para> //可添加命名空间 EgoalTech.DB.Extension.SqlMethod 以支持 Like/In/NotIn/Ascii/Defference/Left/Len/Lower/Ltrim/Rtrim/Right/Upper/GetDate</para>
            </summary>
            <typeparam name="T">DbMocel，派生于 EgoalTech.DB.DbObject</typeparam>
            <param name="where">Lambda 条件</param>
            <param name="rowCount">分页参数：每页返回记录条数</param>
            <param name="pageIndex">分页参数：页码</param>
            <param name="orderBys">排序参数：new[]{ new OrderBy(){ Column = "Name"}} </param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbContext4Lambda.GetCount``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据 Lambda 条件查询记录总数。eg:
            <para> var dbContext = IOC.Get&lt;IDbContext4Lambda&gt;();</para>
            <para> var count = dbContext.GetCount&lt;Currency&gt;(t => t.Name == "name" &amp;&amp; t.Code.Like("CN%"));</para>
            <para> //可添加命名空间 EgoalTech.DB.Extension.SqlMethod 以支持 Like/In/NotIn/Ascii/Defference/Left/Len/Lower/Ltrim/Rtrim/Right/Upper/GetDate</para>
            </summary>
            <typeparam name="T">DbMocel，派生于 EgoalTech.DB.DbObject</typeparam>
            <param name="where">Lambda 条件</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbContext4Lambda.Remove``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            删除符合 Lambda 条件的记录。eg:
            <para> var dbContext = IOC.Get&lt;IDbContext4Lambda&gt;();</para>
            <para> dbContext.Remove&lt;Currency&gt;(t => t.Name == "name" &amp;&amp; t.Code.Like("CN%"));</para>
            </summary>
            <typeparam name="T">DbMocel，派生于 EgoalTech.DB.DbObject</typeparam>
            <param name="where">Lambda 条件</param>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbContext4Lambda.ExecuteScalar``2(EgoalTech.DB.Extension.FieldQuery{``0,``1})">
            <summary>
            删除符合 Lambda 条件的记录。eg:
            <para> var dbContext = IOC.Get&lt;IDbContext4Lambda&gt;();</para>
            <para> var fieldQuery = new QueryCondition&lt;Currency&gt;(t=>t.Code == "code").Max(t => t.CreateDatetime);</para>
            <para> var lastCreateDatetime = dbContext.ExecuteScalar(fieldQuery);</para>
            </summary>
            <typeparam name="T">DbMocel，派生于 EgoalTech.DB.DbObject</typeparam>
            <typeparam name="F">返回的类型</typeparam>
            <param name="query">单值查询，从 QueryCondition&lt;T&gt; 产生。</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.DbContext4Lambda.PartialUpdate``1(System.Linq.Expressions.Expression{System.Func{``0,``0}})">
            <summary>
            根据主键更新指定值段。eg：
            <para> var dbContext = IOC.Get&lt;DbContext4Lambda&gt;();</para>
            <para> dbContext.PartialUpdate&lt;Currency&gt;（t => new Currency(){Id = "主键【必须】",Name = "newName"});</para>
            </summary>
            <typeparam name="T">DbMocel，派生于 EgoalTech.DB.DbObject</typeparam>
            <param name="updateFields">需要更新的字段值</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.DbContext4Lambda.QueryObject``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            根据 Lambda 条件查询一条记录。如果存在多条数据，则返回第一条。eg：
            <para> var dbContext = IOC.Get&lt;DbContext4Lambda&gt;();</para>
            <para> var currency = dbContext.QueryObject&lt;Currency&gt;(t => t.Name == "name" &amp;&amp; t.Code.Like("CN%"));</para>
            <para> //可添加命名空间 EgoalTech.DB.Extension.SqlMethod 以支持 Like/In/NotIn/Ascii/Defference/Left/Len/Lower/Ltrim/Rtrim/Right/Upper/GetDate</para>
            </summary>
            <typeparam name="T">DbMocel，派生于 EgoalTech.DB.DbObject</typeparam>
            <param name="where">Lambda 条件</param>
            <param name="checkExist">检查记录是否存在。true：当记录不存在时抛异常；false：当记录不存在时返回 null。</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.DbContext4Lambda.QueryObjects``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,EgoalTech.DB.Extension.OrderBy{``0}[])">
            <summary>
            根据 Lambda 条件查询记录列表。eg：
            <para> var dbContext = IOC.Get&lt;DbContext4Lambda&gt;();</para>
            <para> var currencies = dbContext.QueryObjects&lt;Currency&gt;(</para>
            <para>     t => t.Name == "name" &amp;&amp; t.Code.Like("CN%"), 10, 0, </para>
            <para>     new OrderBy&lt;Currency&gt;(){ Column = t => t.Name, Desc = false}, new OrderBy&lt;Currency&gt;(){ Column = t => t.CreateDatetime, Desc = true});</para>
            <para> //可添加命名空间 EgoalTech.DB.Extension.SqlMethod 以支持 Like/In/NotIn/Ascii/Defference/Left/Len/Lower/Ltrim/Rtrim/Right/Upper/GetDate</para>
            </summary>
            <typeparam name="T">DbMocel，派生于 EgoalTech.DB.DbObject</typeparam>
            <param name="where">Lambda 条件</param>
            <param name="rowCount">分页参数：每页返回记录条数</param>
            <param name="pageIndex">分页参数：页码</param>
            <param name="orderBys">排序参数 </param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.DbContext4Lambda.QueryObjects``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,EgoalTech.DB.OrderBy[])">
            <summary>
            根据 Lambda 条件查询记录列表。eg:
            <para> var dbContext = IOC.Get&lt;DbContext4Lambda&gt;();</para>
            <para> var currencies = dbContext.QueryObjects&lt;Currency&gt;(</para>
            <para>     t => t.Name == "name" &amp;&amp; t.Code.Like("CN%"), 10, 0, </para>
            <para>     new OrderBy(){ Column ="Name", Desc = false}, new OrderBy(){ Column = "CreateDatetime", Desc = true});</para>
            <para> //可添加命名空间 EgoalTech.DB.Extension.SqlMethod 以支持 Like/In/NotIn/Ascii/Defference/Left/Len/Lower/Ltrim/Rtrim/Right/Upper/GetDate</para>
            </summary>
            <typeparam name="T">DbMocel，派生于 EgoalTech.DB.DbObject</typeparam>
            <param name="where">Lambda 条件</param>
            <param name="rowCount">分页参数：每页返回记录条数</param>
            <param name="pageIndex">分页参数：页码</param>
            <param name="orderBys">排序参数：new[]{ new OrderBy(){ Column = "Name"}} </param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.DbContext4Lambda.GetOrderBy``1(EgoalTech.DB.Extension.OrderBy{``0}[])">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.DbContext4Lambda.GetCount``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据 Lambda 条件查询记录总数。eg:
            <para> var dbContext = IOC.Get&lt;DbContext4Lambda&gt;();</para>
            <para> var count = dbContext.GetCount&lt;Currency&gt;(t => t.Name == "name" &amp;&amp; t.Code.Like("CN%"));</para>
            <para> //可添加命名空间 EgoalTech.DB.Extension.SqlMethod 以支持 Like/In/NotIn/Ascii/Defference/Left/Len/Lower/Ltrim/Rtrim/Right/Upper/GetDate</para>
            </summary>
            <typeparam name="T">DbMocel，派生于 EgoalTech.DB.DbObject</typeparam>
            <param name="where">Lambda 条件</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.DbContext4Lambda.Remove``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            删除符合 Lambda 条件的记录。eg:
            <para> var dbContext = IOC.Get&lt;DbContext4Lambda&gt;();</para>
            <para> dbContext.Remove&lt;Currency&gt;(t => t.Name == "name" &amp;&amp; t.Code.Like("CN%"));</para>
            </summary>
            <typeparam name="T">DbMocel，派生于 EgoalTech.DB.DbObject</typeparam>
            <param name="where">Lambda 条件</param>
        </member>
        <member name="M:EgoalTech.DB.Extension.DbContext4Lambda.ExecuteScalar``2(EgoalTech.DB.Extension.FieldQuery{``0,``1})">
            <summary>
            删除符合 Lambda 条件的记录。eg:
            <para> var dbContext = IOC.Get&lt;DbContext4Lambda&gt;();</para>
            <para> var fieldQuery = new QueryCondition&lt;Currency&gt;(t=>t.Code == "code").Max(t => t.CreateDatetime);</para>
            <para> var lastCreateDatetime = dbContext.ExecuteScalar(fieldQuery);</para>
            </summary>
            <typeparam name="T">DbMocel，派生于 EgoalTech.DB.DbObject</typeparam>
            <typeparam name="F">返回的类型</typeparam>
            <param name="query">单值查询，从 QueryCondition&lt;T&gt; 产生。</param>
            <returns></returns>
        </member>
        <member name="P:EgoalTech.DB.Extension.DbContext4Lambda.SqlFormater">
            <summary></summary>
        </member>
        <member name="T:EgoalTech.DB.Extension.DbRuleContext">
            <summary></summary>
        </member>
        <member name="T:EgoalTech.DB.Extension.IDbRuleContext">
            <summary>
            DbModel 的规则
            </summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbRuleContext.Register``1(EgoalTech.DB.Extension.IRuleMapper{``0})">
            <summary>
            注册 DbModel 的规则。eg:
            <para> var dbRuleContext = IOC.Get&lt;IDbRuleContext&gt;();</para>
            <para> var validator = new RuleEngine&lt;Currency&gt;();</para>
            <para> validator</para>
            <para>   .RuleFor(</para>
            <para>      a => a.Code, //指定的字段</para>
            <para>      o => o.NotNull().NorEmpty().IsEnglishLettle()， //字段验证规则</para>
            <para>      a => a.Name != null, //验证规则的触发条件</para>
            <para>      DbOperation.Create) //验证规则仅应用于 Create</para>
            <para>   .AddUpdateExceptFields(a => a.Code)//Code 字段不允许更新</para>
            <para>   .StartUp();</para>
            <para> dbRuleContext.Register(validator);</para>
            </summary>
            <typeparam name="T">DbMocel，派生于 EgoalTech.DB.DbObject</typeparam>
            <param name="validator">验证处理器</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbRuleContext.GetValidator``1">
            <summary>
            获取 DbModel 的验证规则。eg:
            <para> var dbRuleContext = IOC.Get&lt;IDbRuleContext&gt;();</para>
            <para> var validator = dbRuleContext.GetValidator&lt;Currency&gt;();</para>
            <para> validator.Validate(new Currency(), DbOperation.Create);</para>
            </summary>
            <typeparam name="T">DbMocel，派生于 EgoalTech.DB.DbObject</typeparam>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbRuleContext.GetDbObjectInfo``1">
            <summary>
            获取 DbModel 的数据库关系数据。eg:
            <para> var dbRuleContext = IOC.Get&lt;IDbRuleContext&gt;();</para>
            <para> var dbObjectInfo = dbRuleContext.GetDbObjectInfo&lt;Currency&gt;();</para>
            <para> dbObjectInfo.SetModifyDatetime(new Currency());</para>
            </summary>
            <typeparam name="T">DbMocel，派生于 EgoalTech.DB.DbObject</typeparam>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.DbRuleContext.Register``1(EgoalTech.DB.Extension.IRuleMapper{``0})">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.DbRuleContext.GetRuleMapper``1">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.DbRuleContext.GetValidator``1">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.DbRuleContext.GetDbObjectInfo``1">
            <summary></summary>
        </member>
        <member name="T:EgoalTech.DB.Extension.SqlRouter">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlRouter.#ctor(System.Linq.Expressions.LambdaExpression,EgoalTech.DB.Extension.ISqlFormater,EgoalTech.DB.Extension.IDbRuleContext)">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.SqlRouter.SqlFormater">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.SqlRouter.RuleContext">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.SqlRouter.SqlWhere">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.SqlRouter.EntityType">
            <summary></summary>
        </member>
        <member name="T:EgoalTech.DB.Extension.ISqlFormater">
            <summary>
            Sql辅助类
            </summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.ISqlFormater.FormatCreateSql(System.String,System.String,System.String)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.ISqlFormater.FormatCreateAndReturnIdentitySql(System.String,System.String,System.String)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.ISqlFormater.FormatUpdateSql(System.String,System.String,System.String)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.ISqlFormater.FormatDeleteSql(System.String,System.String)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.ISqlFormater.FormatReadSql(System.String,System.String,System.String)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.ISqlFormater.FormatPagingReadSql(System.String,System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.ISqlFormater.FormatCountSql(System.String,System.String)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.ISqlFormater.FormatTableName(System.String)">
            <summary></summary>       
        </member>
        <member name="M:EgoalTech.DB.Extension.ISqlFormater.FormatFieldName(System.String)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.ISqlFormater.GetOperatorString(System.Linq.Expressions.ExpressionType)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.ISqlFormater.GetSqlMethodFormat(System.Reflection.MethodInfo)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.ISqlFormater.FormatValue(System.Object)">
            <summary></summary>
        </member>
        <member name="T:EgoalTech.DB.Extension.ISqlCondition">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.ISqlCondition.ToSql(EgoalTech.DB.Extension.ISqlFormater,EgoalTech.DB.Extension.IDbRuleContext)">
            <summary></summary>
        </member>
        <member name="T:EgoalTech.DB.Extension.DataVerifyErrorException">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.DataVerifyErrorException.#ctor(EgoalTech.Validation.ObjectValidateException,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.DataVerifyErrorException.FormatException(EgoalTech.Validation.ObjectValidateException,System.Boolean)">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.DataVerifyErrorException.ErrorCode">
            <summary></summary>
        </member>
        <member name="T:EgoalTech.DB.Extension.IDbObjectInfo`1">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbObjectInfo`1.CheckReduplication(EgoalTech.DB.Extension.IDbExecutor,`0,System.String[])">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbObjectInfo`1.FixCondition(System.String)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbObjectInfo`1.FixSortSetting(System.Collections.Generic.IEnumerable{EgoalTech.DB.OrderBy})">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbObjectInfo`1.GetModelByPrimaryKey(EgoalTech.DB.Extension.IDbExecutor,System.String,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbObjectInfo`1.GetModifyDatetime(`0)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbObjectInfo`1.GetPrimaryKey``1(`0)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbObjectInfo`1.SetModifyDatetime(`0)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbObjectInfo`1.SetLogicalDelete(`0)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbObjectInfo`1.CreateClone(EgoalTech.DB.Extension.IDbExecutor,`0)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbObjectInfo`1.ImportClone(EgoalTech.DB.Extension.IDbExecutor,`0)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbObjectInfo`1.RemoveClone(EgoalTech.DB.Extension.IDbExecutor,`0)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.IDbObjectInfo`1.UpdateClone(EgoalTech.DB.Extension.IDbExecutor,`0,System.String[])">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.IDbObjectInfo`1.IsDbLog">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.IDbObjectInfo`1.IsLogicalDelete">
            <summary></summary>
        </member>
        <member name="T:EgoalTech.DB.Extension.SqlTypeExtension">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlTypeExtension.IsSqlCondition(System.Type)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlTypeExtension.FormatToSql(System.Object)">
            <summary></summary>
        </member>
        <member name="T:EgoalTech.DB.Extension.ExpressionExtand">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.ExpressionExtand.Eval(System.Linq.Expressions.Expression)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.ExpressionExtand.Eval``1(System.Linq.Expressions.Expression)">
            <summary></summary>
        </member>
        <member name="T:EgoalTech.DB.Extension.FieldQuery`2">
            <summary></summary>
        </member>
        <member name="T:EgoalTech.DB.Extension.FieldsQuery`2">
            <summary></summary>
        </member>
        <member name="T:EgoalTech.DB.Extension.FieldsQuery`1">
            <summary></summary>
        </member>
        <member name="T:EgoalTech.DB.Extension.FieldsQuery">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.FieldsQuery.#ctor">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.FieldsQuery.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.FieldsQuery.ToSql(EgoalTech.DB.Extension.ISqlFormater,EgoalTech.DB.Extension.IDbRuleContext)">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.FieldsQuery.SubQuerySql">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.FieldsQuery`2.ToSql(EgoalTech.DB.Extension.ISqlFormater,EgoalTech.DB.Extension.IDbRuleContext)">
            <summary></summary>
        </member>
        <member name="T:EgoalTech.DB.Extension.SqlMethod.SqlMethods">
            <summary>
            Lambda 解析的辅助类，包含用于辅助生成 SQL 语句的若干方法（Like/In/NotIn/Ascii/Defference/Left/Len/Lower/Ltrim/Rtrim/Right/Upper/GetDate：扩展方法，可添加命名 EgoalTech.DB.Extension.SqlMethod 以支持智能提示）
            </summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlMethod.SqlMethods.Like(System.String,System.String)">
            <summary>该方法尚未实现，仅用于辅助生成 SQL 语句。 </summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlMethod.SqlMethods.NotLike(System.String,System.String)">
            <summary>该方法尚未实现，仅用于辅助生成 SQL 语句。 </summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlMethod.SqlMethods.In``1(``0,System.Collections.Generic.IEnumerable{System.Nullable{``0}})">
            <summary>该方法尚未实现，仅用于辅助生成 SQL 语句。 </summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlMethod.SqlMethods.NotIn``1(``0,System.Collections.Generic.IEnumerable{System.Nullable{``0}})">
            <summary>该方法尚未实现，仅用于辅助生成 SQL 语句。 </summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlMethod.SqlMethods.In``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>该方法尚未实现，仅用于辅助生成 SQL 语句。 </summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlMethod.SqlMethods.NotIn``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>该方法尚未实现，仅用于辅助生成 SQL 语句。 </summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlMethod.SqlMethods.In``1(System.Nullable{``0},System.Collections.Generic.IEnumerable{System.Nullable{``0}})">
            <summary>该方法尚未实现，仅用于辅助生成 SQL 语句。 </summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlMethod.SqlMethods.NotIn``1(System.Nullable{``0},System.Collections.Generic.IEnumerable{System.Nullable{``0}})">
            <summary>该方法尚未实现，仅用于辅助生成 SQL 语句。 </summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlMethod.SqlMethods.In``1(System.Nullable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>该方法尚未实现，仅用于辅助生成 SQL 语句。 </summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlMethod.SqlMethods.NotIn``1(System.Nullable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>该方法尚未实现，仅用于辅助生成 SQL 语句。 </summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlMethod.SqlMethods.In(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>该方法尚未实现，仅用于辅助生成 SQL 语句。 </summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlMethod.SqlMethods.NotIn(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>该方法尚未实现，仅用于辅助生成 SQL 语句。 </summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlMethod.SqlMethods.In``1(``0,EgoalTech.DB.Extension.FieldsQuery)">
            <summary>该方法尚未实现，仅用于辅助生成 SQL 语句。 </summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlMethod.SqlMethods.NotIn``1(``0,EgoalTech.DB.Extension.FieldsQuery)">
            <summary>该方法尚未实现，仅用于辅助生成 SQL 语句。 </summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlMethod.SqlMethods.In``1(``0,EgoalTech.DB.Extension.FieldsQuery{``0})">
            <summary>该方法尚未实现，仅用于辅助生成 SQL 语句。 </summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlMethod.SqlMethods.NotIn``1(``0,EgoalTech.DB.Extension.FieldsQuery{``0})">
            <summary>该方法尚未实现，仅用于辅助生成 SQL 语句。 </summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlMethod.SqlMethods.Ascii(System.String)">
            <summary>该方法尚未实现，仅用于辅助生成 SQL 语句。 </summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlMethod.SqlMethods.Difference(System.String,System.String)">
            <summary>该方法尚未实现，仅用于辅助生成 SQL 语句。 </summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlMethod.SqlMethods.Left(System.String,System.Int32)">
            <summary>该方法尚未实现，仅用于辅助生成 SQL 语句。 </summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlMethod.SqlMethods.Len(System.String)">
            <summary>该方法尚未实现，仅用于辅助生成 SQL 语句。 </summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlMethod.SqlMethods.Lower(System.String)">
            <summary>该方法尚未实现，仅用于辅助生成 SQL 语句。 </summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlMethod.SqlMethods.Ltrim(System.String)">
            <summary>该方法尚未实现，仅用于辅助生成 SQL 语句。 </summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlMethod.SqlMethods.Rtrim(System.String)">
            <summary>该方法尚未实现，仅用于辅助生成 SQL 语句。 </summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlMethod.SqlMethods.Right(System.String,System.Int32)">
            <summary>该方法尚未实现，仅用于辅助生成 SQL 语句。 </summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlMethod.SqlMethods.Upper(System.String)">
            <summary>该方法尚未实现，仅用于辅助生成 SQL 语句。 </summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlMethod.SqlMethods.GetDate">
            <summary>该方法尚未实现，仅用于辅助生成 SQL 语句。 </summary>
        </member>
        <member name="T:EgoalTech.DB.ObjectNotFoundErrorCodeBuilder">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.ObjectNotFoundErrorCodeBuilder.GenNotFoundErrorCodes(System.String,System.Reflection.Module[])">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.ObjectNotFoundErrorCodeBuilder.GetModelNames(System.Reflection.Module)">
            <summary></summary>
        </member>
        <member name="T:EgoalTech.DB.Extension.OracleFormater">
            <summary>
            通用 Sql辅助类
            </summary>
        </member>
        <member name="T:EgoalTech.DB.Extension.SqlFormater">
            <summary>
            通用 Sql辅助类
            </summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlFormater.FormatCreateSql(System.String,System.String,System.String)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlFormater.FormatCreateAndReturnIdentitySql(System.String,System.String,System.String)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlFormater.FormatUpdateSql(System.String,System.String,System.String)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlFormater.FormatDeleteSql(System.String,System.String)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlFormater.FormatReadSql(System.String,System.String,System.String)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlFormater.FormatPagingReadSql(System.String,System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlFormater.FormatCountSql(System.String,System.String)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlFormater.FormatTableName(System.String)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlFormater.FormatFieldName(System.String)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlFormater.GetSqlMethodFormat(System.Reflection.MethodInfo)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlFormater.GetOperatorString(System.Linq.Expressions.ExpressionType)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlFormater.FormatValue(System.Object)">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.SqlFormater.GetCreateAndReturnIdentitySqlFormat">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.SqlFormater.PagingReadSqlFormat">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.SqlFormater.CreateSqlFormat">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.SqlFormater.UpdateSqlFormat">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.SqlFormater.DeleteSqlFormat">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.SqlFormater.ReadSqlFormat">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.SqlFormater.CountSqlFormat">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.SqlFormater.FieldNameFormat">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.SqlFormater.TableNameFormat">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.OracleFormater.CreateSqlFormat">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.OracleFormater.GetCreateAndReturnIdentitySqlFormat">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.OracleFormater.UpdateSqlFormat">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.OracleFormater.DeleteSqlFormat">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.OracleFormater.ReadSqlFormat">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.OracleFormater.PagingReadSqlFormat">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.OracleFormater.CountSqlFormat">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.OracleFormater.FieldNameFormat">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.OracleFormater.TableNameFormat">
            <summary></summary>
        </member>
        <member name="T:EgoalTech.DB.Extension.MySqlFormater">
            <summary>
            通用 Sql辅助类
            </summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.MySqlFormater.CreateSqlFormat">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.MySqlFormater.GetCreateAndReturnIdentitySqlFormat">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.MySqlFormater.UpdateSqlFormat">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.MySqlFormater.DeleteSqlFormat">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.MySqlFormater.ReadSqlFormat">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.MySqlFormater.PagingReadSqlFormat">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.MySqlFormater.CountSqlFormat">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.MySqlFormater.FieldNameFormat">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.MySqlFormater.TableNameFormat">
            <summary></summary>
        </member>
        <member name="T:EgoalTech.DB.Extension.MsSqlServerFormater">
            <summary>
            通用 Sql辅助类
            </summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.MsSqlServerFormater.CreateSqlFormat">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.MsSqlServerFormater.GetCreateAndReturnIdentitySqlFormat">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.MsSqlServerFormater.UpdateSqlFormat">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.MsSqlServerFormater.DeleteSqlFormat">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.MsSqlServerFormater.ReadSqlFormat">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.MsSqlServerFormater.PagingReadSqlFormat">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.MsSqlServerFormater.CountSqlFormat">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.MsSqlServerFormater.FieldNameFormat">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.MsSqlServerFormater.TableNameFormat">
            <summary></summary>
        </member>
        <member name="T:EgoalTech.DB.Extension.DbOperation">
            <summary></summary>
        </member>
        <member name="F:EgoalTech.DB.Extension.DbOperation.None">
            <summary>無</summary>
        </member>
        <member name="F:EgoalTech.DB.Extension.DbOperation.Create">
            <summary>添加</summary>
        </member>
        <member name="F:EgoalTech.DB.Extension.DbOperation.Update">
            <summary>修改</summary>
        </member>
        <member name="F:EgoalTech.DB.Extension.DbOperation.Read">
            <summary>查詢</summary>
        </member>
        <member name="F:EgoalTech.DB.Extension.DbOperation.Delete">
            <summary>刪除</summary>
        </member>
        <member name="F:EgoalTech.DB.Extension.DbOperation.CUD">
            <summary>增/刪/改</summary>
        </member>
        <member name="F:EgoalTech.DB.Extension.DbOperation.CU">
            <summary>增/改</summary>
        </member>
        <member name="T:EgoalTech.DB.Extension.DbOperationExtension">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.DbOperationExtension.ToActions(EgoalTech.DB.Extension.DbOperation)">
            <summary></summary>
        </member>
        <member name="T:EgoalTech.DB.Extension.OrderBy`1">
            <summary>排序</summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.OrderBy`1.Column">
            <summary>排序字段</summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.OrderBy`1.Desc">
            <summary>是否降序，默认为 false</summary>
        </member>
        <member name="T:EgoalTech.DB.Extension.FieldRouter">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.FieldRouter.#ctor(System.Linq.Expressions.LambdaExpression,EgoalTech.DB.Extension.ISqlFormater)">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.FieldRouter.FieldName">
            <summary></summary>
        </member>
        <member name="T:EgoalTech.DB.Extension.SqlMethodAttribute">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.SqlMethodAttribute.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.SqlMethodAttribute.Format">
            <summary></summary>
        </member>
        <member name="T:EgoalTech.DB.Extension.IModelValidator`1">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.IModelValidator`1.Validate(`0,EgoalTech.DB.Extension.DbOperation)">
            <summary></summary>
        </member>
        <member name="T:EgoalTech.DB.Extension.ORMErrorCode">
            <summary></summary>
        </member>
        <member name="F:EgoalTech.DB.Extension.ORMErrorCode.VALIDATION_ERROR">
            <summary></summary>
        </member>
        <member name="F:EgoalTech.DB.Extension.ORMErrorCode.DATA_VERIFICATION_ERROR">
            <summary></summary>
        </member>
        <member name="F:EgoalTech.DB.Extension.ORMErrorCode.MODEL_VERIFICATION_ERROR">
            <summary></summary>
        </member>
        <member name="F:EgoalTech.DB.Extension.ORMErrorCode.FIELD_VERIFICATION_ERROR">
            <summary></summary>
        </member>
        <member name="T:EgoalTech.DB.Extension.IRuleMapper`1">
            <summary>
            DbModel 的验证规则
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EgoalTech.DB.Extension.IRuleMapper`1.GetDbObjectInfo">
            <summary>
            获取 DbModel 的数据库关系数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IRuleMapper`1.GetModelValidator">
            <summary>
            获取 DbModel 的验证规则
            </summary>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IRuleMapper`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,``0},System.Func{`0,System.Boolean},EgoalTech.DB.Extension.DbOperation)">
            <summary>
            注册 DbModel 指定字段的验证规则，一个字段只能注册一次，重复注册将会抛异常。eg：
            <para> var validator = new RuleEngine&lt;Currency&gt;();</para>
            <para> validator</para>
            <para>   .RuleFor(</para>
            <para>      a => a.Code, //指定的字段</para>
            <para>      o => o.NotNull().NorEmpty().IsEnglishLettle()， //字段验证规则</para>
            <para>      a => a.Name != null, //验证规则的触发条件</para>
            <para>      DbOperation.Create); //验证规则仅应用于 Create</para>
            </summary>
            <typeparam name="F">字段的类型</typeparam>
            <param name="field">指定的字段</param>
            <param name="func">验证规则</param>
            <param name="condition">验证的触发条件</param>
            <param name="dbOperation">验证规则用于何种操作</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IRuleMapper`1.RuleFor``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Func{``0,``1,``0},System.Func{`0,System.Boolean},EgoalTech.DB.Extension.DbOperation)">
            <summary>
            注册 DbModel 指定字段的验证规则，一个字段只能注册一次，重复注册将会抛异常。eg：
            <para> var validator = new RuleEngine&lt;Currency&gt;();</para>
            <para> validator</para>
            <para>   .RuleFor(</para>
            <para>      a => a.ExpireDatetime, //指定的字段</para>
            <para>      a => a.ActivationDatetime, //参与比较的字段</para>
            <para>      (etime, atime) => etime.GratherThan(atime)， //字段比较规则</para>
            <para>      a => a.ExpireDatetime != null, //验证规则的触发条件</para>
            <para>      DbOperation.CU); //验证规则应用于 Create 和 Update</para>
            </summary>
            <typeparam name="F1">字段的类型</typeparam>
            <typeparam name="F2">参与比较的字段的类型</typeparam>
            <param name="field">指定的字段</param>
            <param name="compareField">参与比较的字段</param>
            <param name="compareFunc">比较规则</param>
            <param name="condition">验证的触发条件</param>
            <param name="dbOperation">验证规则用于何种操作</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IRuleMapper`1.PartialRuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,``0},System.Func{`0,System.Boolean},EgoalTech.DB.Extension.DbOperation)">
            <summary>
            注册 DbModel 指定字段的验证规则，一个字段允许多次注册。eg：
            <para> var validator = new RuleEngine&lt;Currency&gt;();</para>
            <para> validator</para>
            <para>   .PartialRuleFor(</para>
            <para>      a => a.ExpireDatetime, //指定的字段</para>
            <para>      o => o.GratherThan(DateTime.MinValue)， //字段比较规则</para>
            <para>      a => a.ExpireDatetime != null, //验证规则的触发条件</para>
            <para>      DbOperation.CU) //验证规则应用于 Create 和 Update</para>
            <para>   .PartialRuleFor(</para>
            <para>      a => a.ExpireDatetime, //指定的字段</para>
            <para>      a => a.ActivationDatetime, //参与比较的字段</para>
            <para>      (etime, atime) => etime.GratherThan(atime)， //字段比较规则</para>
            <para>      a => a.ExpireDatetime != null, //验证规则的触发条件</para>
            <para>      DbOperation.CU); //验证规则应用于 Create 和 Update</para>
            </summary>
            <typeparam name="F">字段的类型</typeparam>
            <param name="field">指定的字段</param>
            <param name="func">验证规则</param>
            <param name="condition">验证的触发条件</param>
            <param name="dbOperation">验证规则用于何种操作</param>
        </member>
        <member name="M:EgoalTech.DB.Extension.IRuleMapper`1.PartialRuleFor``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Func{``0,``1,``0},System.Func{`0,System.Boolean},EgoalTech.DB.Extension.DbOperation)">
            <summary>
            注册 DbModel 指定字段的验证规则，一个字段允许多次注册。eg：
            <para> var validator = new RuleEngine&lt;Currency&gt;();</para>
            <para> validator</para>
            <para>   .PartialRuleFor(</para>
            <para>      a => a.ExpireDatetime, //指定的字段</para>
            <para>      o => o.GratherThan(DateTime.MinValue)， //字段比较规则</para>
            <para>      a => a.ExpireDatetime != null, //验证规则的触发条件</para>
            <para>      DbOperation.CU) //验证规则应用于 Create 和 Update</para>
            <para>   .PartialRuleFor(</para>
            <para>      a => a.ExpireDatetime, //指定的字段</para>
            <para>      a => a.ActivationDatetime, //参与比较的字段</para>
            <para>      (etime, atime) => etime.GratherThan(atime)， //字段比较规则</para>
            <para>      a => a.ExpireDatetime != null, //验证规则的触发条件</para>
            <para>      DbOperation.CU); //验证规则应用于 Create 和 Update</para>
            </summary>
            <typeparam name="F1">字段的类型</typeparam>
            <typeparam name="F2">参与比较的字段的类型</typeparam>
            <param name="field">指定的字段</param>
            <param name="compareField">参与比较的字段</param>
            <param name="compareFunc">比较规则</param>
            <param name="condition">验证的触发条件</param>
            <param name="dbOperation">验证规则用于何种操作</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IRuleMapper`1.RemoveRule``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            移除 DbModel 指定字段的验证规则。eg:
            <para> var validator = new RuleEngine&lt;Currency&gt;();</para>
            <para> validator.RemoveRule(a => a.Name);</para>
            </summary>
            <typeparam name="F">字段的类型</typeparam>
            <param name="field">指定的字段</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IRuleMapper`1.AddCompositeUniqueKeyFields(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            添加重复约束的屬性（字段）映射。eg:
            <para> var validator = new RuleEngine&lt;User&gt;();</para>
            <para> validator.AddCompositeUniqueKeyFields(a => a.Serial);//Serial 不允许重复</para>
            <para> validator.AddCompositeUniqueKeyFields(a => a.OrganizationId, a => a.Username);//同一个组织下，User 的 Username 不允许重复</para>
            </summary>
            <param name="fields">指定的字段</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IRuleMapper`1.ClearCompositeUniqueKeyFields(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            移除重复约束的屬性（字段）映射。eg:
            <para> var validator = new RuleEngine&lt;User&gt;();</para>
            <para> validator.ClearCompositeUniqueKeyFields(a => a.Serial);//Serial 不允许重复</para>
            <para> validator.ClearCompositeUniqueKeyFields(a => a.OrganizationId, a => a.Username);</para>
            </summary>
            <param name="fields">指定的字段</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IRuleMapper`1.ClearAllCompositeUniqueKeyFields">
            <summary>
            移除所有重复约束的屬性（字段）映射。eg:
            <para> var validator = new RuleEngine&lt;User&gt;();</para>
            <para> validator.ClearAllCompositeUniqueKeyFields();</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IRuleMapper`1.AddCreateExceptFields(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            添加插入數據時排除的屬性（字段）映射。eg:
            <para> var validator = new RuleEngine&lt;Currency&gt;();</para>
            <para> validator.AddCreateExceptFields(a => a.CreateDatetime);</para>
            <para> //插入数据库时不传入 CreateDatetime 字段值（数据库指定默认值：GETDATE()）</para>
            </summary>
            <param name="fields">指定的字段</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IRuleMapper`1.ClearCreateExceptField(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            移除所有插入數據時排除的屬性（字段）映射。eg:
            <para> var validator = new RuleEngine&lt;Currency&gt;();</para>
            <para> validator.ClearCreateExceptField(a => a.CreateDatetime);</para>
            </summary>
            <param name="field">指定的字段</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IRuleMapper`1.ClearAllCreateExceptFields">
            <summary>
            移除插入數據時排除的屬性（字段）映射。eg:
            <para> var validator = new RuleEngine&lt;Currency&gt;();</para>
            <para> validator.ClearAllCreateExceptFields();</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IRuleMapper`1.AddUpdateExceptFields(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            添加修改數據時排除的屬性（字段）映射。eg:
            <para> var validator = new RuleEngine&lt;Currency&gt;();</para>
            <para> validator.AddUpdateExceptFields(a => a.Code);//Code 字段不允许修改</para>
            </summary>
            <param name="fields">指定的字段</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IRuleMapper`1.ClearUpdateExceptField(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            移除修改數據時排除的屬性（字段）映射。eg:
            <para> var validator = new RuleEngine&lt;Currency&gt;();</para>
            <para> validator.ClearUpdateExceptField(a => a.Code);</para>
            </summary>
            <param name="field">指定的字段</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IRuleMapper`1.ClearAllUpdateExceptFields">
            <summary>
            移除修改數據時排除的屬性（字段）映射。eg:
            <para> var validator = new RuleEngine&lt;Currency&gt;();</para>
            <para> validator.ClearAllUpdateExceptFields();</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IRuleMapper`1.SetPrimaryKeyField(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            添加主鍵的屬性（字段）映射。eg:
            <para> var validator = new RuleEngine&lt;Currency&gt;();</para>
            <para> validator.SetPrimaryKeyField(a => a.Id);//Id 为主键</para>
            </summary>
            <param name="field">指定的字段</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IRuleMapper`1.ClearPrimaryKeyField">
            <summary>
            移除主鍵的屬性（字段）映射。eg:
            <para> var validator = new RuleEngine&lt;Currency&gt;();</para>
            <para> validator.ClearPrimaryKeyField();</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IRuleMapper`1.SetNameField(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            添加名稱的屬性（字段）映射。eg:
            <para> var validator = new RuleEngine&lt;Currency&gt;();</para>
            <para> validator.SetNameField(a => a.Name);//Name 为名称字段</para>
            </summary>
            <param name="field">指定的字段</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IRuleMapper`1.ClearNameField">
            <summary>
            移除名稱的屬性（字段）映射。eg:
            <para> var validator = new RuleEngine&lt;Currency&gt;();</para>
            <para> validator.ClearNameField();</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IRuleMapper`1.SetCodeField(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            添加唯一鍵的屬性（字段）映射。eg:
            <para> var validator = new RuleEngine&lt;Currency&gt;();</para>
            <para> validator.SetCodeField(a => a.Code);//Code 为唯一键</para>
            </summary>
            <param name="field">指定的字段</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IRuleMapper`1.ClearCodeField">
            <summary>
            移除唯一鍵的屬性（字段）映射。eg:
            <para> var validator = new RuleEngine&lt;Currency&gt;();</para>
            <para> validator.ClearCodeField();</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IRuleMapper`1.SetLogicalDeleteField(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>添加邏輯刪除的屬性（字段）映射。eg:
            <para> var validator = new RuleEngine&lt;Currency&gt;();</para>
            <para> validator.SetLogicalDeleteField(a => a.Invalid);//Invalid 为逻辑删除字段</para>
            </summary>
            <param name="field">指定的字段</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IRuleMapper`1.ClearLogicalDeleteField">
            <summary>
            移除邏輯刪除的屬性（字段）映射。eg:
            <para> var validator = new RuleEngine&lt;Currency&gt;();</para>
            <para> validator.ClearLogicalDeleteField();</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IRuleMapper`1.SetCreateDatetimeField(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            添加插入時間的屬性（字段）映射。eg:
            <para> var validator = new RuleEngine&lt;Currency&gt;();</para>
            <para> validator.SetCreateDatetimeField(a => a.CreateDatetime);//CreateDatetime 记录插入数据库的时间</para>
            </summary>
            <param name="field">指定的字段</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IRuleMapper`1.ClearCreateDatetimeField">
            <summary>
            移除插入時間的屬性（字段）映射。eg:
            <para> var validator = new RuleEngine&lt;Currency&gt;();</para>
            <para> validator.ClearCreateDatetimeField();</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IRuleMapper`1.SetCreaterField(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            添加插入操作員的屬性（字段）映射。eg:
            <para> var validator = new RuleEngine&lt;Currency&gt;();</para>
            <para> validator.SetCreaterField(a => a.CreateUserId);//CreateUserId 记录插入数据库的用户 Id</para>
            </summary>
            <param name="field">指定的字段</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IRuleMapper`1.ClearCreaterField">
            <summary>
            移除插入操作員的屬性（字段）映射。eg:
            <para> var validator = new RuleEngine&lt;Currency&gt;();</para>
            <para> validator.ClearCreaterField();</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IRuleMapper`1.SetModifyDatetimeField(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            添加版本的屬性（字段）映射。eg:
            <para> var validator = new RuleEngine&lt;Currency&gt;();</para>
            <para> validator.SetModifyDatetimeField(a => a.ModifyDatetime);//ModifyDatetime 记录版本号</para>
            </summary>
            <param name="field">指定的字段</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IRuleMapper`1.ClearModifyDatetimeField">
            <summary>
            移除版本的屬性（字段）映射。eg:
            <para> var validator = new RuleEngine&lt;Currency&gt;();</para>
            <para> validator.ClearModifyDatetimeField();</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IRuleMapper`1.SetDbLog(System.Boolean)">
            <summary>
            DbModel 的修改是否写入日志。eg:
            <para> var validator = new RuleEngine&lt;Currency&gt;();</para>
            <para> validator.SetDbLog(true);//Currency 的所有修改都将写入更新日志</para>
            </summary>
            <param name="isLog">是否写入更新日志</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.IRuleMapper`1.StartUp">
            <summary>启动</summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.IRuleMapper`1.FieldRules">
            <summary></summary>
        </member>
        <member name="T:EgoalTech.DB.Extension.RuleEngine`1">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.#ctor">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.Init">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.SetDefault">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.Bind">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.GetModelByPrimaryKey(EgoalTech.DB.Extension.IDbExecutor,System.String,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.UpdateClone(EgoalTech.DB.Extension.IDbExecutor,`0,System.String[])">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.CreateClone(EgoalTech.DB.Extension.IDbExecutor,`0)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.ImportClone(EgoalTech.DB.Extension.IDbExecutor,`0)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.RemoveClone(EgoalTech.DB.Extension.IDbExecutor,`0)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.GetPrimaryKey``1(`0)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.GetModifyDatetime(`0)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.SetModifyDatetime(`0)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.SetLogicalDelete(`0)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.CheckReduplication(EgoalTech.DB.Extension.IDbExecutor,`0,System.String[])">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.FixCondition(System.String)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.FixSortSetting(System.Collections.Generic.IEnumerable{EgoalTech.DB.OrderBy})">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.GetDbField(System.String,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.CheckPropertyName(System.String)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.GetCloneModelFunction(System.String[])">
            <summary>
            获取实例克隆函数
            </summary>
            <param name="ignoreFields">需要忽略的属性名</param>
            <returns></returns>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.CloneList(System.Collections.IList,System.Collections.IList)">
            <summary> 淺克隆List集合，將newObj中的元素複製到local中 </summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.Validate(`0,EgoalTech.DB.Extension.DbOperation)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.Validate(System.Object,EgoalTech.DB.Extension.DbOperation)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.GetDbObjectInfo">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.GetModelValidator">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,``0},System.Func{`0,System.Boolean},EgoalTech.DB.Extension.DbOperation)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.RuleFor``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Func{``0,``1,``0},System.Func{`0,System.Boolean},EgoalTech.DB.Extension.DbOperation)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.PartialRuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,``0},System.Func{`0,System.Boolean},EgoalTech.DB.Extension.DbOperation)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.PartialRuleFor``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Func{``0,``1,``0},System.Func{`0,System.Boolean},EgoalTech.DB.Extension.DbOperation)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.AddCreateExceptFields(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>添加插入數據時排除的屬性（字段）映射</summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.ClearCreateExceptField(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>移除所有插入數據時排除的屬性（字段）映射</summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.ClearAllCreateExceptFields">
            <summary>移除插入數據時排除的屬性（字段）映射</summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.AddUpdateExceptFields(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>添加修改數據時排除的屬性（字段）映射</summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.ClearUpdateExceptField(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>移除修改數據時排除的屬性（字段）映射</summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.ClearAllUpdateExceptFields">
            <summary>移除修改數據時排除的屬性（字段）映射</summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.AddCompositeUniqueKeyFields(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>添加重复约束的屬性（字段）映射</summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.ClearCompositeUniqueKeyFields(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>移除重复约束的屬性（字段）映射</summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.ClearAllCompositeUniqueKeyFields">
            <summary>移除所有重复约束的屬性（字段）映射</summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.SetCodeField(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>添加唯一鍵的屬性（字段）映射</summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.ClearCodeField">
            <summary>移除唯一鍵的屬性（字段）映射</summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.SetPrimaryKeyField(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>添加主鍵的屬性（字段）映射</summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.ClearPrimaryKeyField">
            <summary>移除主鍵的屬性（字段）映射</summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.SetNameField(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>添加名稱的屬性（字段）映射</summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.ClearNameField">
            <summary>移除名稱的屬性（字段）映射</summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.SetLogicalDeleteField(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>添加邏輯刪除的屬性（字段）映射invalid</summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.ClearLogicalDeleteField">
            <summary>移除邏輯刪除的屬性（字段）映射</summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.SetCreateDatetimeField(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>添加插入時間的屬性（字段）映射</summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.ClearCreateDatetimeField">
            <summary>移除插入時間的屬性（字段）映射</summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.SetCreaterField(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>添加插入操作員的屬性（字段）映射</summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.ClearCreaterField">
            <summary>移除插入操作員的屬性（字段）映射</summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.SetModifyDatetimeField(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>添加版本的屬性（字段）映射</summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.ClearModifyDatetimeField">
            <summary>移除版本的屬性（字段）映射</summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.SetDbLog(System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.StartUp">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.RuleEngine`1.GetPropertyName(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary> 從表達式中獲取屬性名 </summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.RuleEngine`1.PropertyInfos">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.RuleEngine`1.DbTable">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.RuleEngine`1.AllFields">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.RuleEngine`1.PrimaryKeyField">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.RuleEngine`1.CodeField">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.RuleEngine`1.NameField">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.RuleEngine`1.LogicalDeleteField">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.RuleEngine`1.CreateDatetimeField">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.RuleEngine`1.ModifyDatetimeField">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.RuleEngine`1.CreaterField">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.RuleEngine`1.CompositeUniqueKeyFields">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.RuleEngine`1.CreateExceptFields">
            <summary> 创建实例时不需要赋值的属性 </summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.RuleEngine`1.UpdateExceptFields">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.RuleEngine`1.IsDbLog">
            <summary></summary>
        </member>
        <member name="P:EgoalTech.DB.Extension.RuleEngine`1.IsLogicalDelete">
            <summary></summary>
        </member>
        <member name="T:EgoalTech.DB.Extension.TypeExtension">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.TypeExtension.GetAttribute``1(System.Type)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.TypeExtension.GetAttributes``1(System.Type)">
            <summary></summary>
        </member>
        <member name="M:EgoalTech.DB.Extension.TypeExtension.GetDbTableName(System.Type)">
            <summary></summary>
        </member>
        <member name="T:System.Reflection.FastInvokeHandler">
            <summary></summary>
        </member>
        <member name="T:System.Reflection.MethodInfoExtension">
            <summary></summary>
        </member>
        <member name="M:System.Reflection.MethodInfoExtension.FastInvoke(System.Reflection.MethodInfo,System.Object,System.Object[])">
            <summary></summary>
        </member>
        <member name="M:System.Reflection.MethodInfoExtension.GetExecuteDelegate(System.Reflection.MethodInfo)">
            <summary>
            获取一个委托
            </summary>
        </member>
    </members>
</doc>
